// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University_CRM.Infrastructure.Persistence;

#nullable disable

namespace University_CRM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230313085537_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("University_CRM.Domain.Entities.Collage", b =>
                {
                    b.Property<int>("CollageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionArabic")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionEnglish")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CollageId");

                    b.ToTable("Collage");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreditHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionArabic")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionEnglish")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasLap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.CoursePrerequisite", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoursePrerequisiteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "CoursePrerequisiteId");

                    b.HasIndex("CoursePrerequisiteId");

                    b.ToTable("CoursePrerequisite");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionArabic")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionEnglish")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CollageId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescriptionArabic")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionEnglish")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProgramTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProgramId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProgramTypeId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.ProgramCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgreamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "ProgreamId");

                    b.HasIndex("ProgreamId");

                    b.ToTable("ProgramCourse");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.ProgramType", b =>
                {
                    b.Property<int>("ProgramTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ProgramTypeId");

                    b.ToTable("ProgramType");

                    b.HasData(
                        new
                        {
                            ProgramTypeId = 1,
                            NameArabic = "بكالـوريوس",
                            NameEnglish = "Bachelor's"
                        });
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.CoursePrerequisite", b =>
                {
                    b.HasOne("University_CRM.Domain.Entities.Course", "Course")
                        .WithMany("Courses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_CRM.Domain.Entities.Course", "CoursePrerequisites")
                        .WithMany("CoursePrerequisites")
                        .HasForeignKey("CoursePrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CoursePrerequisites");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Department", b =>
                {
                    b.HasOne("University_CRM.Domain.Entities.Collage", "Collage")
                        .WithMany("Departments")
                        .HasForeignKey("CollageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collage");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Program", b =>
                {
                    b.HasOne("University_CRM.Domain.Entities.Department", "Department")
                        .WithMany("Programs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_CRM.Domain.Entities.ProgramType", "ProgramType")
                        .WithMany("Programs")
                        .HasForeignKey("ProgramTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("ProgramType");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.ProgramCourse", b =>
                {
                    b.HasOne("University_CRM.Domain.Entities.Course", "Course")
                        .WithMany("Programs")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University_CRM.Domain.Entities.Program", "Program")
                        .WithMany("Courses")
                        .HasForeignKey("ProgreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Collage", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Course", b =>
                {
                    b.Navigation("CoursePrerequisites");

                    b.Navigation("Courses");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Department", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.Program", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("University_CRM.Domain.Entities.ProgramType", b =>
                {
                    b.Navigation("Programs");
                });
#pragma warning restore 612, 618
        }
    }
}
